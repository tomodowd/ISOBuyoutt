# -*- coding: utf-8 -*-
"""Copy of iso_buyout_model.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16mN_0c6Uau7JYMNuezCXEGI4bCYGZUCc
"""

import streamlit as st
import numpy as np
import pandas as pd
import numpy_financial as npf
import matplotlib.pyplot as plt

st.set_page_config(page_title="ISO Residual Buyout Model", layout="wide")

st.title("ðŸ“ˆ ISO Residual Buyout Model")

# --- Sidebar Inputs ---
st.sidebar.header("ðŸ›  Model Inputs")

# Basic Inputs
portfolio_residual_monthly = st.sidebar.number_input("Starting Residual Inflow per Month ($)", value=50000)
upfront_multiple = st.sidebar.number_input("Upfront Multiple (e.g., 4 for 4x)", value=34.0)
annual_attrition_rate = st.sidebar.number_input("Annual Attrition Rate (%)", value=15.0) / 100
attrition_step_up_rate = st.sidebar.number_input("Attrition Step-Up per Month (%)", value=0.0) / 100
guarantee_period_months = st.sidebar.number_input("Guarantee Period (Months)", value=0)

# Earn-Outs
st.sidebar.subheader("Earn-Out Structure")
earn_outs_schedule_input = st.sidebar.text_input("Earn-Out Checkpoints (Months, comma-separated)", "24")
earn_outs_schedule = [int(x.strip()) for x in earn_outs_schedule_input.split(',') if x.strip().isdigit()]

# Dynamic Earn-Out Tiers
earn_out_tiers = {}
for checkpoint in earn_outs_schedule:
    st.sidebar.markdown(f"**Checkpoint Month {checkpoint}**")
    thresholds = st.sidebar.text_input(f"Attrition Thresholds for {checkpoint} (comma-separated)", "0.15,0.16,0.17,0.18,0.19")
    multiples = st.sidebar.text_input(f"Multiples for {checkpoint} (comma-separated)", "5,4,3,2,1")
    thresholds_list = [float(x.strip()) for x in thresholds.split(',')]
    multiples_list = [float(x.strip()) for x in multiples.split(',')]
    earn_out_tiers[checkpoint] = dict(zip(thresholds_list, multiples_list))

# Front Book Inputs
front_book_included = st.sidebar.radio("Include Front Book?", ["No", "Yes"]) == "Yes"
if front_book_included:
    front_book_volume = st.sidebar.number_input("New MIDs per Month", value=0)
    front_book_value_per_mid_residual = st.sidebar.number_input("Residual Value per MID ($)", value=0.0)
    front_book_value_per_mid_revenue = st.sidebar.number_input("Revenue per MID ($)", value=0.0)
else:
    front_book_volume = 0
    front_book_value_per_mid_residual = 0
    front_book_value_per_mid_revenue = 0

# Model Duration
model_years = st.sidebar.selectbox("Model Duration (Years)", [5, 10])
model_period_months = model_years * 12

# --- Model Calculations ---
monthly_attrition_rate = 1 - (1 - annual_attrition_rate) ** (1/12)
initial_residual_base = portfolio_residual_monthly
upfront_payment = -upfront_multiple * initial_residual_base

# DataFrame
df = pd.DataFrame(index=np.arange(model_period_months))
df['month'] = df.index + 1
df['residual_base'] = 0.0
df['cash_inflow'] = 0.0

residual_base = initial_residual_base
adjusted_monthly_attrition = monthly_attrition_rate

for idx in df.index:
    month = df.loc[idx, 'month']
    if month <= guarantee_period_months:
        residual_base = residual_base
    else:
        residual_base *= (1 - adjusted_monthly_attrition)
        adjusted_monthly_attrition += attrition_step_up_rate

    net_contribution = 0
    if front_book_included:
        front_book_residual_add = front_book_volume * front_book_value_per_mid_residual
        front_book_revenue_add = front_book_volume * front_book_value_per_mid_revenue
        net_contribution = front_book_revenue_add - front_book_residual_add
        residual_base += front_book_residual_add

    df.loc[idx, 'residual_base'] = residual_base
    df.loc[idx, 'cash_inflow'] = residual_base + net_contribution

# Cash Flows
cash_flows = [upfront_payment] + df['cash_inflow'].tolist()

# Earn-Outs
earn_out_payments = np.zeros(len(cash_flows))

for checkpoint in earn_outs_schedule:
    if checkpoint < len(df):
        assumed_annual_attrition = annual_attrition_rate

        tier_dict = earn_out_tiers.get(checkpoint, {})
        best_match_multiple = 0
        for threshold, multiple in sorted(tier_dict.items()):
            if assumed_annual_attrition <= threshold:
                best_match_multiple = multiple
                break

        if best_match_multiple > 0:
            earn_out_payment = - (best_match_multiple * initial_residual_base)
            earn_out_payments[checkpoint] = earn_out_payment

cash_flows = np.array(cash_flows) + earn_out_payments

# Metrics
cumulative_cf = np.cumsum(cash_flows)
total_gross_inflows = sum(df['cash_inflow'])
total_invested = abs(upfront_payment) + abs(sum(earn_out_payments))
financial_moic = total_gross_inflows / total_invested
monthly_irr = npf.irr(cash_flows)
annualized_irr = (1 + monthly_irr) ** 12 - 1

# --- Outputs ---
st.header("ðŸ“Š Model Outputs")

col1, col2, col3 = st.columns(3)
col1.metric("Financial MOIC", f"{financial_moic:.2f}x")
col2.metric("Annualized IRR", f"{annualized_irr*100:.2f}%")
col3.metric("Monthly IRR", f"{monthly_irr*100:.2f}%")

st.subheader("Cumulative Cash Flow")
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(df['month'], cumulative_cf[1:], label='Cumulative Cash Flow')
ax.axhline(0, color='gray', linestyle='--')
ax.set_xlabel('Month')
ax.set_ylabel('Cumulative Cash Flow ($)')
ax.grid(True)
ax.legend()
st.pyplot(fig)

st.subheader("Monthly Net Cash Flows")
fig2, ax2 = plt.subplots(figsize=(12, 6))
months = np.arange(0, model_period_months + 1)
ax2.bar(months, cash_flows, alpha=0.7)
ax2.set_xlabel('Month')
ax2.set_ylabel('Monthly Cash Flow ($)')
ax2.axhline(0, color='black', linestyle='--')
ax2.grid(True)
st.pyplot(fig2)

st.success("âœ… Model Complete. Adjust parameters on the left and re-run!")